-- users
-- INSERT INTO FRIENDSHIPS(USER_ID, FRIEND_ID)
--                 SELECT 3, 1
--                 FROM dual
--             WHERE NOT EXISTS
--                 (SELECT 1 FROM
--                 FRIENDSHIPS
--                 WHERE (USER_ID = 3
--                 AND FRIEND_ID = 1)
--                 OR (USER_ID = 1
--                 AND FRIEND_ID = 3));
--
-- SELECT u.*
--                 FROM USERS u
--                 WHERE u.id IN
--                 (SELECT f.friend_id
--                 FROM FRIENDSHIPS f
--                 WHERE f.user_id = 3
--
--                 UNION
--                 SELECT f.user_id
--                 FROM FRIENDSHIPS f
--                 WHERE f.friend_id = 3
--                 AND f.STATUS = TRUE)
--films
-- SELECT f.*, m.name as MPA_NAME, g.ID AS GENRE_ID, g.NAME as GENRE_NAME
--                 FROM FILMS as f
--                         LEFT JOIN FILM_GENRE as fg on f.id = fg.FILM_ID
--                         LEFT JOIN MPA as m on f.id = m.ID
--                         LEFT JOIN GENRES as g on g.id = fg.GENRE_ID
--                 LEFT JOIN LIKES as l on l.film_id = f.id
--                 GROUP BY f.id, GENRE_ID
--                 ORDER BY COUNT(l.user_id) DESC
--                 LIMIT 10
-- SELECT f.*,
--        M.NAME as MPA_NAME,
--            GROUP_CONCAT(G2.ID)  as GENRE_ID, GROUP_CONCAT(G2.NAME) as GENRE_NAME
-- FROM FILMS f
--          LEFT JOIN PUBLIC.FILM_GENRE FG on f.ID = FG.FILM_ID
--          LEFT JOIN PUBLIC.MPA M on M.ID = f.MPA_ID
--          LEFT JOIN PUBLIC.GENRES G2 on FG.GENRE_ID = G2.ID
-- GROUP BY f.ID;

SELECT f.*, m.name as MPA_NAME, g.ID AS GENRE_ID, g.NAME as GENRE_NAME
FROM FILMS as f
         LEFT JOIN FILM_GENRE as fg on f.id = fg.FILM_ID
         LEFT JOIN MPA as m on f.MPA_ID = m.ID
         LEFT JOIN GENRES as g on g.id = fg.GENRE_ID
 WHERE f.id = 1
--genres
-- SELECT *
-- FROM USERS
-- WHERE ID IN (SELECT *
--              FROM ((SELECT f.friend_id
--                     FROM FRIENDSHIPS f
--                     WHERE f.user_id = 2
--                     UNION
--                     SELECT f.user_id
--                     FROM FRIENDSHIPS f
--                     WHERE f.friend_id = 2
--                       AND f.STATUS = TRUE)
--                    INTERSECT
--                    (SELECT f.friend_id
--                     FROM FRIENDSHIPS f
--                     WHERE f.user_id = 3
--                     UNION
--                     SELECT f.user_id
--                     FROM FRIENDSHIPS f
--                     WHERE f.friend_id = 3
--                       AND f.STATUS = TRUE)));
--mpa