DROP TABLE IF EXISTS friendships;
DROP TABLE IF EXISTS film_genre;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS users;



CREATE TABLE IF NOT EXISTS users
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     varchar(50) NOT NULL,
    email    varchar(50) NOT NULL,
    login    varchar(50) NOT NULL,
    birthday DATE        NOT NULL,
    CONSTRAINT birthday_check CHECK (birthday < CURRENT_DATE)
);

CREATE TABLE IF NOT EXISTS mpa
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(50) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        varchar(50)  NOT NULL,
    description varchar(200) NOT NULL,
    releaseDate DATE         NOT NULL,
    duration    INTEGER      NOT NULL,
    mpa_id      INTEGER REFERENCES mpa (id),
    CONSTRAINT releaseDate_check CHECK (releaseDate >= '1895-12-28'),
    CONSTRAINT duration_check CHECK (duration >= 1)
);


CREATE TABLE IF NOT EXISTS genres
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(50) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS likes
(
    user_id INTEGER REFERENCES users (id),
    film_id INTEGER REFERENCES films (id),
    PRIMARY KEY (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS film_genre
(
    genre_id INTEGER REFERENCES genres (id),
    film_id  INTEGER REFERENCES films (id),
    PRIMARY KEY (genre_id, film_id)
);

CREATE TABLE IF NOT EXISTS friendships
(
    user_id   INTEGER REFERENCES users (id),
    friend_id INTEGER REFERENCES users (id),
    status BOOLEAN DEFAULT FALSE,
     PRIMARY KEY (user_id, friend_id)
);